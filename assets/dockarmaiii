#!/bin/bash

main() {
  # perform pre-install configuration
  initial_checks

  if [[ $DRYRUN = true ]]; then
    echo 'This is a dry county, Son!'
  else
    startup
  fi
}

initial_checks() {
  sudo chown steam. /data
  sudo chown steam. /home/steam
  # check to see FS mounts are writable
  fs_check /data/testfile
  fs_check /home/steam/testfile

  if [ ! -f /home/steam/steamer.txt ]
    then
      do_steamer_config
  fi

  if [[ $BUILD_ENABLED = true ]]; then
    if [[ $FORCEUPDATE = true ]] || [ ! -f /data/dockarmaiii_update_date ]
      then
        do_app_update
    fi

    if [[ $WASTELAND_ENABLED = true ]]; then
      do_wasteland_dl
    fi

    if [[ $OVERWATCH_ENABLED = true ]]; then
      do_ace_dl
      do_cba_dl
      do_overwatch_dl
    fi
  fi
}

fs_check() {
  if [ ! -f $1 ]
    then
      COUNTZERO=0
      echo "waiting on $1 to be writable"
      echo 'success' |tee $1 || true
      FS_CHECK=$(cat $1 ) || FS_CHECK=0
      while [ ! $FS_CHECK = 'success' ]
      do
        sleep 3
        echo 'success' |tee $1 || true
        FS_CHECK=$(cat $1 ) || FS_CHECK=0
        echo "count $COUNTZERO"
        (( COUNTZERO++ ))
      done
      echo "File system check of $1 was $FS_CHECK"
      rm $1
  else
    echo "$1 exists already"
  fi
}

export_startup_vars() {
  # perform post-install configuration

  # set the server aspect (--server/--client)
  if [[ ${HEADLESS_CLIENT} ]]
    then
      export ASPECT="-client"
  else
      export ASPECT="-server"
  fi

  if [[ $MODS ]]
    then
      # format the MODS string to escape ;
      export MODS=$(echo "$MODS"  | sed 's|;|\\;|g')
      export MODSTRING="-mod=$MODS"
  else
      export MODSTRING=""
  fi

  # set the port
  if [[ $PORT ]]
    then
      export PORTSTRING="-port=$PORT"
  else
      export PORTSTRING="-port=2302"
  fi

  # format the SERVERMODS string to escape ;
  if [[ $SERVERMODS ]]
    then
      export SERVERMODS=$(echo "$SERVERMODS"  | sed 's|;|\\;|g')
      export SERVERMODSTRING="-servermod=$SERVERMODS"
  else
      export SERVERMODSTRING=""
  fi

  export CMDSTRING="-netlog $ASPECT -pid=/home/steam/arma3server.pid -ranking=/home/steam/ranking.log -ip=0.0.0.0 $PORTSTRING -profiles=/home/steam/profiles -cfg=/home/steam/arma3-server.network.cfg -config=/home/steam/arma3-server.server.cfg -bepath=/data/battleye $MODSTRING $SERVERMODSTRING"
}

startup() {
  export_startup_vars

  cd /data
  while [ 1 ]
  do
    echo "./arma3server $CMDSTRING"
    eval ./arma3server $CMDSTRING
    echo restarting
    sleep 3
  done
}

do_app_update() {
  echo 'data install'
  sleep 3
  date -I > /data/dockarmaiii_start_data
  cat /data/dockarmaiii_start_data
  mkdir -p /data/arma3
  cd /opt/steamer
  ./steamcmd.sh +runscript /home/steam/steamer.txt
  cd /data
  rm -Rf /data/mpmissions
  mkdir -p /home/steam/mpmissions
  ln -s /home/steam/mpmissions
  rm /data/dockarmaiii_start_data
  date -I > /data/dockarmaiii_update_date
  sudo chown -R steam. /data
}

do_steamer_config() {
  echo 'configuration'
  date -I > /home/steam/dockarmaiii_start_config
  cat /home/steam/dockarmaiii_start_config

  cp /assets/steamer.txt /home/steam/
  cd /home/steam
  #ln -s '/home/steam/Steam/steamapps/common/Arma 3 Server' arma3
  sed -i "s/REPLACEME_USERNAME/$STEAM_USERNAME/" steamer.txt
  sed -i "s/REPLACEME_PASSWORD/$STEAM_PASSWORD/" steamer.txt
  sed -i "s/REPLACEME_GID/$STEAM_GID/" steamer.txt

  # if these aren't present the server will segfault/coredump
  mkdir -p "/home/steam/.local/share/Arma 3"
  mkdir -p "/home/steam/.local/share/Arma 3 - Other Profiles"

  mkdir -p /home/steam/profiles
  cd /home/steam

  cp /assets/arma3-server.server.cfg ./
  cp /assets/arma3-server.network.cfg ./

  sed -i  "s/^headlessClients.*/headlessClients[]=\{\"$CLIENT_IP\", \"$CLIENT_IP2\", \"$CLIENT_IP3\", \"$CLIENT_IP4\", \"$CLIENT_IP5\", \"$CLIENT_IP6\" \};/" ./arma3-server.server.cfg
  sed -i  "s/^localClient.*/localClient[]=\{\"$CLIENT_IP\", \"$CLIENT_IP2\", \"$CLIENT_IP3\", \"$CLIENT_IP4\", \"$CLIENT_IP5\", \"$CLIENT_IP6\" \};/" ./arma3-server.server.cfg
  sed -i  "s/^passwordAdmin.*/passwordAdmin = \"$ADMIN_PASSWORD\";/" ./arma3-server.server.cfg
  sed -i  "s/^hostname.*/hostname = \"$HOSTNAME\";/" ./arma3-server.server.cfg
  sed -i  "s/^maxPlayers.*/maxPlayers = \"$MAX_PLAYERS\";/" ./arma3-server.server.cfg

  sudo chown -R steam. /home/steam
  rm /home/steam/dockarmaiii_start_config
  date -I > /home/steam/dockarmaiii_update_config
}

do_wasteland_dl() {
  if [ ! -f /data/.wasteland.dl ]
    then
      echo "WASTELAND_DL"
      cd /home/steam/mpmissions
      wget -c -q https://github.com/Thalhalla/ArmA3_Wasteland.Altis/raw/dev/release/ArmA3_Wasteland.Altis.pbo
      date -I > /data/.wasteland.dl
  fi
}

do_overwatch_dl() {
  if [ ! -f /data/.overwatch.dl ]
    then
      echo "OVERWATCH_DL ${OVERTHROW_VERSION:=0.7.5.1}"
      TMP=$(mktemp -d)
      cd $TMP
      wget -cq https://github.com/ArmaOverthrow/Overthrow/archive/$OVERTHROW_VERSION.zip
      unzip $OVERTHROW_VERSION.zip
      mkdir -p '/data/mods'
      mv Overthrow-$OVERTHROW_VERSION  '/data/mods/@Overthrow'
      cd
      rm -Rf $TMP
      date -I > /data/.overwatch.dl
  fi
}

do_cba_dl() {
  if [ ! -f /data/.cba.dl ]
    then
      echo "CBA_DL ${CBA_VERSION:=3.4.0.170627}"
      CBA_FILE=CBA_A3-$CBA_VERSION
      TMP=$(mktemp -d)
      cd $TMP
      wget -cq https://github.com/CBATeam/CBA_A3/archive/v$CBA_VERSION.zip
      unzip $CBA_FILE.zip
      rm $CBA_FILE.zip
      mkdir -p '/data/mods'
      mv CBA_A3-3.4.0.170627 '/data/mods/@CBA_A3'
      cd
      rm -Rf $TMP
      date -I > /data/.cba.dl
  fi
}

do_ace_dl() {
  if [ ! -f /data/.ace.dl ]
    then
      echo "ACE_DL ${ACE_VERSION:=3.10.1}"
      ACE_FILE=ace3_$ACE_VERSION.zip
      TMP=$(mktemp -d)
      cd $TMP
      wget -cq https://github.com/acemod/ACE3/releases/download/v$ACE_VERSION/$ACE_FILE
      unzip $ACE_FILE
      mkdir -p '/data/mods'
      mv '@ace' '/data/mods/@ace'
      cd
      rm -Rf $TMP
      date -I > /data/.ace.dl
  fi
}

main "$@"
